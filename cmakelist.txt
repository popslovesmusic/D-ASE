cmake_minimum_required(VERSION 3.10)

# Project information
project(D-ASE 
    VERSION 1.0.0
    DESCRIPTION "Digital-Analog Simulation Engine with Excel-style Interface"
    LANGUAGES CXX
)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Add include directory
include_directories(include)

# Compiler-specific options
if(MSVC)
    add_compile_options(/W4 /EHsc)
else()
    add_compile_options(-Wall -Wextra -pedantic)
endif()

# Source files
set(SOURCES
    src/analog.cpp
    src/webserver.cpp
    src/bridge.cpp
    src/json_bridge.cpp
)

# Create executables
add_executable(analog src/analog.cpp)
add_executable(webserver src/webserver.cpp)
add_executable(bridge src/bridge.cpp)
add_executable(json_bridge src/json_bridge.cpp)
add_executable(test src/test.cpp)

# Set output directory
set_target_properties(analog webserver bridge json_bridge test
    PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
)

# Installation
install(TARGETS analog webserver bridge json_bridge test
    RUNTIME DESTINATION bin
)

install(FILES web/index.html
    DESTINATION share/dase/web
)

install(DIRECTORY examples/
    DESTINATION share/dase/examples
)

install(FILES README.md LICENSE
    DESTINATION share/doc/dase
)

# CPack configuration for packaging
include(CPack)
set(CPACK_PACKAGE_NAME "D-ASE")
set(CPACK_PACKAGE_VERSION "${PROJECT_VERSION}")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${PROJECT_DESCRIPTION}")
set(CPACK_PACKAGE_VENDOR "D-ASE Development Team")
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
set(CPACK_RESOURCE_FILE_README "${CMAKE_CURRENT_SOURCE_DIR}/README.md")

# Documentation with Doxygen
find_package(Doxygen)
if(DOXYGEN_FOUND)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile
                   ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
    
    add_custom_target(docs
        ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        COMMENT "Generating API documentation with Doxygen" VERBATIM
    )
endif()

# Testing (optional)
enable_testing()
add_test(NAME BasicTest COMMAND test)